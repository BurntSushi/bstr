name: ci
on:
  pull_request:
  push:
    branches:
    - master
  schedule:
    - cron: '00 01 * * *'
jobs:
  test:
    name: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # The docs seem to suggest that we can have a matrix with just an
        # include directive, but it results in a "matrix must define at least
        # one vector" error in the CI system.
        build: [pinned, stable, beta, nightly, macos, win-msvc, win-gnu]
        include:
        - build: pinned
          os: ubuntu-18.04
          rust: 1.48.0
        - build: stable
          os: ubuntu-18.04
          rust: stable
        - build: beta
          os: ubuntu-18.04
          rust: beta
        - build: nightly
          os: ubuntu-18.04
          rust: nightly
        - build: macos
          os: macos-latest
          rust: stable
        - build: win-msvc
          os: windows-2019
          rust: stable
        - build: win-gnu
          os: windows-2019
          rust: stable-x86_64-gnu
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        override: true
        toolchain: ${{ matrix.rust }}
        profile: minimal
    - run: cargo build --verbose
    - run: cargo doc --verbose
    # We run a few other builds, but only on one instance to avoid doing
    # more work than we need to.
    - if: matrix.build == 'stable'
      run: cargo build --verbose --features serde1
    - if: matrix.build == 'stable'
      run: cargo build --verbose --no-default-features
    - if: matrix.build == 'stable'
      run: cargo build --verbose --no-default-features --features serde1-nostd
    - if: matrix.build == 'stable'
      run: cargo build --verbose --no-default-features --features alloc
    - if: matrix.build == 'stable'
      run: cargo build --verbose --no-default-features --features alloc,serde1
    # Our dev dependencies evolve more rapidly than we'd like, so only run
    # tests when we aren't pinning the Rust version.
    - if: matrix.build != 'pinned'
      run: cargo test --verbose
    # As with 'cargo build' above, run tests on a bunch of feature
    # combinations, but just on 'stable' to avoid doing more work that we have
    # to.
    - if: matrix.build == 'stable'
      run: cargo test --verbose --features serde1
    - if: matrix.build == 'stable'
      run: cargo test --verbose --no-default-features
    - if: matrix.build == 'stable'
      run: cargo test --verbose --no-default-features --features serde1-nostd
    - if: matrix.build == 'stable'
      run: cargo test --verbose --no-default-features --features alloc
    - if: matrix.build == 'stable'
      run: cargo test --verbose --no-default-features --features alloc,serde1
    - if: matrix.build == 'stable'
      run: cargo test --verbose --no-default-features --features alloc,unicode
    - if: matrix.build == 'stable'
      run: cargo test --verbose --no-default-features --features alloc,unicode,serde1
    - name: Run benchmarks as tests
      if: matrix.build == 'stable'
      working-directory: ./bench
      run: cargo test --verbose --benches

  rustfmt:
    name: rustfmt
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        override: true
        toolchain: stable
        profile: minimal
        components: rustfmt
    - name: Check formatting
      run: |
        cargo fmt -- --check
    - name: Check formatting in ./bench
      working-directory: ./bench
      run: |
        cargo fmt -- --check
